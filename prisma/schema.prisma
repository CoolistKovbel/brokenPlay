// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @unique
  username String  @unique
  email    String  @unique
  password String
  phone    String?
  eddress  String  @unique
  image    String?

  server   Group[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String?
  inviteCode String  @unique

  members  Member[]
  channels Channel[]

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  groupID String @db.ObjectId
  group   Group  @relation(fields: [groupID], references: [id])

  message        Message[]
  directMessages DirectMessage[]

  conversationInitated Conversation[] @relation("MemberOne")
  conversationRecieved Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([groupID])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id])

  groupID String @db.ObjectId
  group   Group  @relation(fields: [groupID], references: [id])

  message Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([groupID])
}

model Message {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  fileUrl String?

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id])

  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id])

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  memberOneId String @db.ObjectId
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id])

  memberTwoId String @db.ObjectId
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id])

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
